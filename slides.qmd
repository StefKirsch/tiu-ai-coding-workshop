---
title: "Feel the Vibes: AI-assisted Coding"
format:
  revealjs:
    theme: default
    css:  styles-overrides.scss  
    slide-number: true
    progress: true
    toc: true
    toc-depth: 1
    incremental: false
    smaller: true               # global smaller font size
    scrollable: true
bibliography: references.bib
editor: visual
---

# Best Practices

## 😵 Which model do I use? pt. 1

Thankfully, we no longer need to navigate different models for our tasks, thanks to GPT5.


![](images/choice_of_models.png){height=50%}

-   Different models for different tasks.

-   4o series for writing/ planning.

-   o3, o4 mini and o4 mini high for coding and logical reasoning.


<details markdown="block">
<summary markdown="span">More about this</summary>


- For a coding task, try using the o4 mini models first, they are much faster than o3.
- If you think the o4 models are not able to achieve your task, go with o3- it is a bigger reasoning model that can go more in-depth (at the cost of taking more time)


</details>

## 😵 Which model do I use? pt. 2


![](images/GPT5.png)

-   Picks the appropriate model based on the task at hand!*

<details markdown="block">
<summary markdown="span">*More about this</summary>


- GPT5 may not always do this. It is at best, using key words in your prompt to gauge task complexity (and deciding further course of action) 
- Sometimes it will think way too little and sometimes start reasoning about something it doesn't need to.
- It is always an advantage to know a bit about the different models. This video tells you about them in detail and with usecases.

<iframe width="560" height="315" src="https://www.youtube.com/embed/uluRM4yIras?si=3caDpUQO9zF904OO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

</details>


## 👥 Use Git
::: columns

::: {.column width="50%"}
![](images/version_control_1.jpeg)
:::

::: {.column width="50%"}
- Git helps you track versions of your code as you progress through time ⌚  

- Git enables you to have a contingency! 🔐

- No matter how you change your code always have a back up!💾
:::

:::


##

use git diff **before pushing your script**

provide resources and links

`<a href="https://imgflip.com/i/a4ullf"`{=html}<img src="https://i.imgflip.com/a4ullf.jpg" title="made at imgflip.com"/></a>

-   add two slides for diffs

## 🚫 How to (not) have it write code

::: callout-note
## 🏆 Golden Rule 1

**It is your responsibility to have enough context into the problem. The lesser context you have, the less effective it might be in the long run.**
:::

![](images/GPT5_context_1.png)

## Thus began the cycle of debugging ChatGPTs code

-   Code provided doesn't run locally:

![](images/GPT5_context_2.png)

-   Features that work in canvas fail in my machine:

![](images/GPT5_context_3.png)

## End result of such workflows

-   You end up debugging ChatGPTs code way more than you would like.

-   Takes longer overall (even if the start was quick)

<iframe src="https://giphy.com/embed/Ty9Sg8oHghPWg" width="480" height="480" style frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>

## ✅ How to have it write code

**1. Narrow the scope of the problem**

::: { .callout-note }
## 🏆 Golden Rule 2

**Narrow and specific problems enable you to have more control and understanding of your own code and the AI generated code.**
:::

![](images/GPT5_specific_problem_1.png){height="30%"}

## 

![](images/GPT5_specific_problem_2.png){height="15%"}

## 

**2. 💡 Understanding code with it**

-   Breaking down unfamiliar code

![](images/GPT5_understand_code_1.png)

## 

-   Improving your own code base (pt1)

![](images/GPT5_understand_code_2.png)

-   A glimpse of the response: ![](images/GPT5_understand_code_3.png)

## 

-   Improving your own code base (pt2) - *including use-case*

![](images/GPT5_understand_code_4.png){width="30%"}

## 📓 Takeaways for AI powered code reviews

-   ChatGPT generally has very high standards (looks into both major and very minor issues) - be mindful of its feedback and gauge what is most useful for you.
-   Giving more context into the use-case of your code will help it better tailor its response for you.
-   Don't give yourself a headache going too deep into its feedback, its important to know that responses will vary even if the same prompt is sent again. Keep re-reading the first point until you are convinced 🎈

<iframe src="https://giphy.com/embed/RleRfnqeBrr3uKIRog" width="480" height="271" style frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>

## 📏 Prompt engineering (continued)

-   Limit verbosity (in general), you can always dig for more if *you* want

::: columns
::: {.column width="50%"}
🔴

![](images/GPT5_prompt_engineering_1.png){width="500"}
:::

::: {.column width="50%"}
💚

![](images/GPT5_prompt_engineering_2.png){width="500"}
:::
:::

## 

-   Asking to focus on clarity over conciseness

::: columns
::: {.column width="50%"}
🔴

![](images/GPT5_prompt_engineering_3.png){width="500"}
:::

::: {.column width="50%"}
💚

![](images/GPT5_prompt_engineering_4.png){width="500"}
:::
:::

## 

-   On assigning roles and more

    <iframe width="560" height="315" src="https://www.youtube.com/embed/X7YjqKk-7Y0?si=hYKV42m7p6FMOUWD" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen>

    </iframe>

<details>

<summary>More examples with resources</summary>

1.  [Ethan Mollick on prompt engineering](https://www.moreusefulthings.com/instructor-prompts)
2.  [TU Delft's wiki on prompting ChatGPT for researchers](https://hri-wiki.tudelft.nl/llm/chat-gpt-prompts)

</details>

## ☃️ When to take a break from it

-   Frustration with ChatGPT

::: columns
::: {.column width="70%"}
![](images/GPT5_frustration_1.png)
:::

::: {.column width="30%"}
<iframe src="https://giphy.com/embed/y1WDIwAZRSmru" width="400" height="300" style frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>
:::
:::

## 

-   Your collaboration turns into dependence

## 🏁 Using Projects

::: callout-note
## Using Projects

I have found using projects to be a fantastic aid in managing my chats and using them mindfully.

-   Add specific context or media that ChatGPT will keep in its memory for future chats.
-   Better workflow for different projects with corresponding chats
:::

![](images/Projects_callout.png){width="834"}

------------------------------------------------------------------------

## Slide 2

Here is another slide.
